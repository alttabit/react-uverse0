[{"/Users/mitchell/Documents/GitHub/react-uvers0/src/index.js":"1","/Users/mitchell/Documents/GitHub/react-uvers0/src/App.js":"2","/Users/mitchell/Documents/GitHub/react-uvers0/src/3d/System1.js":"3","/Users/mitchell/Documents/GitHub/react-uvers0/src/3d/Fightr1.js":"4","/Users/mitchell/Documents/GitHub/react-uvers0/src/effects/Effects.js":"5"},{"size":432,"mtime":1611828891068,"results":"6","hashOfConfig":"7"},{"size":1614,"mtime":1632999178065,"results":"8","hashOfConfig":"7"},{"size":5592,"mtime":1632998960001,"results":"9","hashOfConfig":"7"},{"size":791,"mtime":1620251751027,"results":"10","hashOfConfig":"7"},{"size":1553,"mtime":1632999004239,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"2jc7h",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/mitchell/Documents/GitHub/react-uvers0/src/index.js",[],["25","26"],"/Users/mitchell/Documents/GitHub/react-uvers0/src/App.js",["27","28"],"/Users/mitchell/Documents/GitHub/react-uvers0/src/3d/System1.js",["29"],"import React, { Suspense, useRef, useState } from \"react\";\nimport { Stars } from \"drei\";\n\nimport { useFrame } from \"react-three-fiber\";\n\nimport \"../styles.css\";\n\nimport Effects from \"../effects/Effects\";\nimport Fightr1 from \"./Fightr1\";\n\nconst Sun = () => {\n  const mesh = useRef();\n  // Set up state for the hovered and active state\n  const [active, setActive] = useState(false);\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.0001;\n  });\n  return (\n    <mesh ref={mesh} position={[0, 0, 0]} onClick={(e) => setActive(!active)}>\n      <sphereBufferGeometry attach=\"geometry\" args={[60, 33, 32]} />\n      <meshBasicMaterial\n        attach=\"material\"\n        color={active ? \"yellow\" : \"orange\"}\n        roughness={1}\n        metalness={0}\n        intensity={1.2}\n      />\n      <Effects />\n      <pointLight\n        distance={4000}\n        decay={1}\n        position={[0, 0, 0]}\n        color=\"#ffffff\"\n        skyColor=\"#ffffbb\"\n        groundColor=\"#080820\"\n        intensity={1.0}\n      />\n    </mesh>\n  );\n};\n\nconst Planet1 = () => {\n  const [active, setActive] = useState(false);\n  const group = useRef();\n  useFrame(() => {\n    group.current.rotation.y += 0.00015;\n  });\n\n  const mesh = useRef();\n  useFrame(() => {\n    mesh.current.rotation.y += 0.0001;\n  });\n  return (\n    <group ref={group}>\n      <mesh\n        ref={mesh}\n        position={[600, 0, 0]}\n        onClick={(e) => setActive(!active)}\n      >\n        <sphereBufferGeometry attach=\"geometry\" args={[10, 33, 32]} />\n        <meshPhongMaterial\n          attach=\"material\"\n          color={active ? \"yellow\" : \"orange\"}\n          opacity={1}\n          roughness={1}\n          metalness={0}\n        />\n        <Effects />\n      </mesh>\n    </group>\n  );\n};\n\nconst Planet2 = () => {\n  const group = useRef();\n  useFrame(() => {\n    group.current.rotation.y += 0.00009;\n  });\n\n  const mesh = useRef();\n  useFrame(() => {\n    mesh.current.rotation.y += 0.00025;\n  });\n  return (\n    <group ref={group}>\n      <mesh ref={mesh} position={[900, 20, 0]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[10, 33, 32]} />\n        <meshPhongMaterial\n          attach=\"material\"\n          color=\"blue\"\n          opacity={1}\n          roughness={1}\n          metalness={0}\n        />\n        <Effects />\n      </mesh>\n    </group>\n  );\n};\n\nconst Planet3 = () => {\n  const group = useRef();\n  useFrame(() => {\n    group.current.rotation.y += 0.00025;\n    group.current.rotation.z += 0.00005;\n  });\n\n  const mesh = useRef();\n  useFrame(() => {\n    mesh.current.rotation.y += 0.00012;\n  });\n  return (\n    <group ref={group}>\n      <mesh ref={mesh} position={[1400, 0, 0]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[20, 33, 32]} />\n        <meshPhongMaterial\n          attach=\"material\"\n          color=\"beige\"\n          opacity={1}\n          roughness={1}\n          metalness={0}\n        />\n        <Effects />\n      </mesh>\n    </group>\n  );\n};\n\nconst Planet4 = () => {\n  const group = useRef();\n  useFrame(() => {\n    group.current.rotation.y += 0.000065;\n  });\n\n  const mesh = useRef();\n  useFrame(() => {\n    mesh.current.rotation.y += 0.00025;\n  });\n  return (\n    <group ref={group}>\n      <mesh ref={mesh} position={[1700, 0, 0]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[20, 33, 32]} />\n        <meshPhongMaterial\n          attach=\"material\"\n          color=\"red\"\n          opacity={1}\n          roughness={1}\n          metalness={0}\n        />\n        <Effects />\n      </mesh>\n    </group>\n  );\n};\n\nconst Planet5 = () => {\n  const group = useRef();\n  useFrame(() => {\n    group.current.rotation.y += 0.000065;\n  });\n\n  const mesh = useRef();\n  useFrame(() => {\n    mesh.current.rotation.y += 0.00025;\n  });\n\n  const ring = useRef();\n\n  return (\n    <group ref={group}>\n      <mesh ref={mesh} position={[2000, 0, 1000]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[30, 33, 30]} />\n        <meshPhongMaterial\n          attach=\"material\"\n          color=\"white\"\n          opacity={1}\n          roughness={1}\n          metalness={0}\n        />\n        <Effects />\n      </mesh>\n      <mesh ref={ring} position={[1995, -1, 1000]} rotation={[1, 10, 15]}>\n        <torusBufferGeometry args={[40, 2, 3, 50]} />\n        <meshPhongMaterial\n          attach=\"material\"\n          color=\"white\"\n          opacity={1}\n          roughness={1}\n          metalness={0}\n        />\n      </mesh>\n    </group>\n  );\n};\n\nconst AsteroidBelt = () => {\n  const group = useRef();\n  const mesh = useRef();\n  return (\n    <group ref={group}>\n      <Suspense fallback={null}>\n        <mesh ref={mesh} position={[3000, 0, 0]}>\n          <sphereBufferGeometry attach=\"geometry\" args={[0.1, 0.1, 0.1]} />\n          <meshPhongMaterial\n            attach=\"material\"\n            color=\"white\"\n            opacity={1}\n            roughness={1}\n            metalness={0}\n          />\n        </mesh>\n      </Suspense>\n    </group>\n  );\n};\nfunction System1() {\n  return (\n    <group>\n      <Stars\n        radius={2000} // Radius of the inner sphere (default=100)\n        depth={200} // Depth of area where stars should fit (default=50)\n        count={200} // Amount of stars (default=5000)\n        factor={2} // Size factor (default=4)\n        saturation={0} // Saturation 0-1 (default=0)\n        fade=\"true\" // Faded dots (default=false)\n      />\n      <Sun />\n      <Planet1 />\n      <Planet2 />\n      <Planet3 />\n      <Planet4 />\n      <Planet5 />\n      <AsteroidBelt />\n    </group>\n  );\n}\nexport default System1;\n","/Users/mitchell/Documents/GitHub/react-uvers0/src/3d/Fightr1.js",["30","31","32","33","34"],"import React, { useRef, Suspense } from \"react\";\n\nimport {\n  Canvas,\n  useLoader,\n  extend,\n  useFrame,\n  useThree,\n} from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\n\nimport \"../styles.css\";\n\nextend({ EffectComposer });\n\nconst Fightr = () => {\n  const { nodes } = useLoader(GLTFLoader, \"/fightr1.glb\");\n\n  return (\n    <group>\n      <mesh visible geometry={nodes.Default.geometry}>\n        <meshPhongMaterial\n          attach=\"material\"\n          color=\"orange\"\n          roughness={1}\n          metalness={0}\n        />\n      </mesh>\n    </group>\n  );\n};\n\nfunction Fightr1() {\n  return (\n    <group>\n      <Fightr />\n    </group>\n  );\n}\nexport default Fightr1;\n","/Users/mitchell/Documents/GitHub/react-uvers0/src/effects/Effects.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":25},{"ruleId":"39","severity":1,"message":"43","line":10,"column":8,"nodeType":"41","messageId":"42","endLine":10,"endColumn":15},{"ruleId":"39","severity":1,"message":"43","line":9,"column":8,"nodeType":"41","messageId":"42","endLine":9,"endColumn":15},{"ruleId":"39","severity":1,"message":"44","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":23},{"ruleId":"39","severity":1,"message":"40","line":1,"column":25,"nodeType":"41","messageId":"42","endLine":1,"endColumn":33},{"ruleId":"39","severity":1,"message":"45","line":4,"column":3,"nodeType":"41","messageId":"42","endLine":4,"endColumn":9},{"ruleId":"39","severity":1,"message":"46","line":7,"column":3,"nodeType":"41","messageId":"42","endLine":7,"endColumn":11},{"ruleId":"39","severity":1,"message":"47","line":8,"column":3,"nodeType":"41","messageId":"42","endLine":8,"endColumn":11},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'Fightr1' is defined but never used.","'useRef' is defined but never used.","'Canvas' is defined but never used.","'useFrame' is defined but never used.","'useThree' is defined but never used.","no-global-assign","no-unsafe-negation"]